
# This file was *autogenerated* from the file closest_points_and_shortest_distance_of_parallel_lines.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# Finding closest points and shortest distance between parallel lines.
# by Yann Lamontagne

# Initialize variables
t=var('t');
s=var('s');

# othogonal projection
def proj_on(u, a):
	return (u.dot_product(a)/a.dot_product(a))*a

# define line 1, point and direction vector
P1=vector((_sage_const_0 , _sage_const_1 , _sage_const_0 ));
d1=vector((_sage_const_1 , _sage_const_2 , _sage_const_0 ))

L1=P1+t*d1;

# define line 2, point and direction vector
P2=vector((_sage_const_0 , -_sage_const_1 /_sage_const_2 , _sage_const_0 ));
d2=vector((_sage_const_1 , _sage_const_2 , _sage_const_0 ))

L2=P2+s*d2;


# Closest point on line 1 and line 2
C1 = L1(t=_sage_const_0 )+proj_on(L2(s=_sage_const_0 )-L1(t=_sage_const_0 ), L1(t=_sage_const_1 )-L1(t=_sage_const_0 ))
C2 = L2(s=_sage_const_0 )

print("Point on L1:")
print(C1)
print("is closest to the point on L2:") 
print(C2)
print("Shortest distance between L1 and L2: ")
print((C2-C1).norm())

